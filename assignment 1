#  Creating Doubly Linked List Class
class Node :
    age = 0
    name = None
    next = None
    prev = None
    def __init__(self, name,  age) :
        self.name = name
        self.age = age
    #  Input function
    @staticmethod
    def  takeInput() :
        head = None
        print("Family LinkedList")
        sc =  "Python-inputs"
        print("Enter the name of the family member  (ENTER -1 TO STOP)")
        name = input()
        print("Enter the age of the family member  (ENTER -1 TO STOP)")
        age = input()
        while (age != -1) :
            node = Node(name, age)
            if (head == None) :
                head = node
            else :
                temp = head
                while (temp.next != None) :
                    temp = temp.next
                node.prev = temp
                temp.next = node
            print("Enter name")
            name = input()
            print("Enter age")
            age = input()
        sc.close()
        return head
    #  Printing from start functon
    @staticmethod
    def printFront( head) :
        temp = head
        while (temp != None) :
            print(temp.name + " is " + str(temp.age) + " years old ")
            temp = temp.next
    # Printing from end function
    @staticmethod
    def printEnd( head) :
        temp = head
        while (temp.next != None) :
            temp = temp.next
        while (temp != None) :
            print(temp.name + " is " + str(temp.age) + " years old ")
            temp = temp.prev
    #  Insert Node at Head
    @staticmethod
    def insertAtHead( head,  name,  age) :
        node = Node(name, age)
        node.next = head
        head.prev = node
        head = node
    #  Delete from end
    @staticmethod
    def poll( head) :
        temp = head
        while (temp.next != None) :
            temp = temp.next
        temp.prev.next = None
    @staticmethod
    def deleteAt( head,  i) :
        if (i == 0) :
            temp = head
            head = temp.next
            head.prev = None
        else :
            temp = head
            j = 0
            while (j < i) :
                temp = temp.next
                j += 1
            temp.prev.next = temp.next
            temp.next.prev = temp.prev
class doublyLinkedList :
    @staticmethod
    def main( args) :
        head = Node.takeInput()
        Node.printFront(head)
    

if __name__=="__main__":
    doublyLinkedList.main([])
    
    
//Deep choudhary
//ECE
//SID:211050008

/*BONUS QUESTION
Q.Try to find a way to link the family members' doubly-linked list based on their relationship.
Ans.One way to link the family members doubly-linked list is by sorting the doubly linked list according to age in 
decending order.By doing so we will get a doubly linked list in which older generation people will be close to head 
in double linked list and new generation people will be close to tail in doubly linked list.
*/    
